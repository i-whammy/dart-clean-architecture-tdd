// Mocks generated by Mockito 5.1.0 from annotations
// in angular_app/test/lib/name_test.dart.
// Do not manually edit this file.

import 'package:angular_app/name.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [NameGateway].
///
/// See the documentation for Mockito's code generation for more information.
class MockNameGateway extends _i1.Mock implements _i2.NameGateway {
  MockNameGateway() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String getName() =>
      (super.noSuchMethod(Invocation.method(#getName, []), returnValue: '')
          as String);
}

/// A class which mocks [NamePresenter].
///
/// See the documentation for Mockito's code generation for more information.
class MockNamePresenter extends _i1.Mock implements _i2.NamePresenter {
  MockNamePresenter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setName(String? name) =>
      super.noSuchMethod(Invocation.method(#setName, [name]),
          returnValueForMissingStub: null);
}

/// A class which mocks [NameState].
///
/// See the documentation for Mockito's code generation for more information.
class MockNameState extends _i1.Mock implements _i2.NameState {
  MockNameState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  set name(String? _name) => super.noSuchMethod(Invocation.setter(#name, _name),
      returnValueForMissingStub: null);
}
